# AIPM Framework Workspace Configuration
# ======================================
# This file configures the AIPM framework workspace ONLY.
# Each project will have its own .aipm/opinions.yaml file.
# 
# When you run ./scripts/start.sh, it will:
# 1. Detect available workspaces (framework + any projects)
# 2. Load the opinions.yaml from the selected workspace
# 3. All operations use that workspace's rules
#
# HOW THIS FILE IS LOADED BY opinions-loader.sh:
# =============================================
loading:
  # Discovery is simple: ALWAYS at fixed path
  discovery:
    path: "./.aipm/opinions.yaml"      # ALWAYS this path, no searching
    # Why: We always work from workspace root (framework or project)
    # Framework: AIPM/.aipm/opinions.yaml
    # Project: Product/.aipm/opinions.yaml (via symlink)
  
  # Validation performed by opinions-loader.sh
  validation:
    # Required sections for minimal functionality
    required: ["workspace", "branching", "memory", "lifecycle", "workflows"]
    
    # Optional but recommended sections
    recommended: ["naming", "team", "validation", "sessions", "defaults"]
    
    # Validation behavior
    strictMode: true                    # Fail on unknown keys
    hashCheck: true                     # Verify file hasn't changed during session
    schemaVersion: "1.0"                # Minimum schema version required
    
    # Error handling
    onError: "fail"                     # Options: fail | warn | use-defaults
    # - fail: Stop execution with clear error
    # - warn: Show warning but continue
    # - use-defaults: Use framework defaults
  
  # Context detection by opinions-loader.sh
  context:
    detectBy: "workspace.name"          # Use name field to identify
    validatePrefix: true                # Ensure prefix matches workspace
    enforceIsolation: true              # Block cross-workspace operations
    
    # Prefix validation rules
    prefixRules:
      mustMatch: ["branching.prefix", "memory.entityPrefix"]  # These must align
      pattern: "^[A-Z][A-Z0-9_]*_$"     # Required format: UPPERCASE_
      reserved: ["GIT_", "TEMP_", "BACKUP_"]  # Can't use these
  
  # Inheritance (DISABLED for v1.0)
  inheritance:
    enabled: false                      # No inheritance in v1.0
    # Future versions may support:
    # - Framework defaults for projects
    # - Organizational templates
    # - Team-specific overrides
    # For now: Each workspace is completely independent
#
# USAGE EXAMPLES:
# ==============
# Framework workspace (this file):
#   prefix: AIPM_
#   mainBranch: AIPM_MAIN
#   entityPrefix: AIPM_
#
# Project workspace example:
#   prefix: PRODUCT_
#   mainBranch: PRODUCT_MAIN  
#   entityPrefix: PRODUCT_
#
# Another project example:
#   prefix: CLIENTSITE_
#   mainBranch: CLIENTSITE_MAIN
#   entityPrefix: CLIENTSITE_
#
# HOW TO CUSTOMIZE FOR YOUR PROJECT:
# =================================
# 1. Copy this file to YourProject/.aipm/opinions.yaml
# 2. Change workspace.name to your project name (e.g., PRODUCT)
# 3. Update all prefixes to match (PRODUCT_, PRODUCT_MAIN, etc.)
# 4. Adjust lifecycle rules for your workflow
# 5. Add project-specific categories
# 6. Set validation.mode to 'relaxed' if starting out

# Who am I?
workspace:
  # REQUIRED: Identifies what kind of workspace this is
  # CURRENTLY SUPPORTED: framework | project
  # - framework: The AIPM framework itself (this file)
  # - project: Any project using AIPM (Product, ClientSite, etc.)
  # 
  # NOT YET SUPPORTED (future features):
  # - org: Organization-wide settings
  # - team: Team-specific settings
  type: framework
  
  # REQUIRED: Unique identifier for this workspace
  # BEST PRACTICE: Use UPPERCASE for clarity
  # Examples: AIPM, PRODUCT, CLIENTSITE, MOBILEAPP
  # This is used in:
  # - Branch prefixes (if dynamic prefix enabled)
  # - Memory entity prefixes
  # - Display messages and logs
  name: AIPM
  
  # OPTIONAL: Human-readable description
  # Examples:
  # - "AI Project Manager Framework Development"
  # - "E-commerce Platform Development"
  # - "Client Website Redesign Project"
  description: "AI Project Manager Framework Development"

# How do I manage branches?
branching:
  # REQUIRED: Namespace prefix for ALL branches in this workspace
  # This creates complete isolation between workspaces
  # MUST BE UNIQUE across all workspaces to prevent conflicts
  #
  # Framework example: AIPM_
  # Project examples: PRODUCT_, CLIENTSITE_, MOBILE_, BACKEND_
  # 
  # WHY THIS MATTERS:
  # - Creates visual grouping in 'git branch' output
  # - Enables automated cleanup (can delete PROJECT_* safely)
  # - Prevents accidental operations on wrong branches
  # - Allows multiple AIPM workspaces in same repo (rare but possible)
  prefix: AIPM_
  
  # REQUIRED: Main branch suffix (prefix will be added automatically)
  # Full branch name will be: {prefix}{mainBranchSuffix}
  # This is where AIPM commits memory, configs, and other changes
  # Created automatically from initialization mapping on first run
  #
  # Examples:
  # - mainBranchSuffix: MAIN -> AIPM_MAIN (for framework)
  # - mainBranchSuffix: MAIN -> PRODUCT_MAIN (for projects)
  # - mainBranchSuffix: MAIN -> CLIENTSITE_MAIN (for projects)
  # 
  # CONVENTION: Always use 'MAIN' unless you have a specific reason
  mainBranchSuffix: MAIN
  
  # REQUIRED: Branch initialization mapping
  # AIPM creates its own branches from your existing branches
  # Once created, AIPM abandons the original branch and works on its own
  # The first commit in any AIPM branch will be tagged 'AIPM_INIT_HERE'
  
  # ⚠️ WARNING: REMAPPING BEHAVIOR ⚠️
  # ==================================
  # Normal behavior: If AIPM branches exist, initialization is SKIPPED
  # 
  # REMAPPING: ./scripts/start.sh --remap
  # - Forces recreation of ALL AIPM branches
  # - Old AIPM branches are ABANDONED (not deleted)
  # - Creates new branches from current mappings
  # - Your git tree will have orphaned branches!
  #
  # CLEANUP: ./scripts/start.sh --remap --clean
  # - Same as --remap but DELETES old AIPM branches
  # - DANGEROUS: Loses all AIPM history!
  # - Only use if you understand the consequences
  #
  # DO NOT modify these mappings unless you need --remap
  # Changes are detected on start and will prompt for action
  
  # Primary branch mapping (most important)
  initialization:
    # Source branch -> AIPM branch mapping
    # Only provide suffix; prefix will be added automatically
    main:                           # From user's 'main' branch
      suffix: MAIN                  # Creates: {prefix}MAIN (e.g., AIPM_MAIN)
      fromCommit: HEAD              # Optional: specific commit SHA or HEAD
      # Normal mode: If AIPM_MAIN exists, this is ignored
      # --remap mode: Forces recreation even if exists
    
    # Additional branch mappings (optional)
    # Example for projects that need multiple branches:
    # develop:
    #   suffix: DEVELOP              # Creates: {prefix}DEVELOP
    #   fromCommit: HEAD
    # staging:
    #   suffix: STAGING              # Creates: {prefix}STAGING
    #   fromCommit: abc123def        # Specific commit
    # production:
    #   suffix: PROD                 # Creates: {prefix}PROD
    #   fromCommit: v1.2.3           # Tag reference
  
  # IMPORTANT: Branch creation behavior
  # - AIPM splits from the specified commit (default: HEAD)
  # - Creates new branch with workspace prefix + suffix
  # - First commit will be 'AIPM_INIT_HERE' for tracking
  # - Original branch is abandoned (AIPM never commits there)
  # - You can always return to original branch if needed
  #
  # INITIALIZATION RULES:
  # 1. First run: Creates all mapped branches
  # 2. Subsequent runs: Skips existing branches
  # 3. Modified mappings: Detected and warns user
  # 4. --remap flag: Forces recreation (abandons old)
  # 5. --remap --clean: Forces recreation (deletes old)
  
  # OPTIONAL: Branches that need special protection
  # These cannot be deleted by cleanup operations
  protectedBranches:
    # User's original branches (never touched by AIPM)
    userBranches:
      - main                        # User's original
      - master                      # Legacy support
      - develop                     # Common development branch
      - staging                     # Deployment branches
      - production
    
    # AIPM branches to protect (provide suffix only)
    # Full branch names will be {prefix}{suffix}
    aipmBranchSuffixes:
      - MAIN                        # Protects {prefix}MAIN (e.g., AIPM_MAIN)
      # Projects might add:
      # - STAGING                   # Protects {prefix}STAGING
      # - PROD                      # Protects {prefix}PROD

# How do I name my branches?
naming:
  # Branch naming patterns for different purposes
  # Available variables:
  # {timestamp} = YYYYMMDD_HHMMSS (e.g., 20240621_143022)
  # {date} = YYYYMMDD (e.g., 20240621)
  # {user} = git user.name (e.g., john_doe)
  # {description} = user-provided description
  # {version} = semantic version (e.g., 1.2.3)
  # {environment} = deployment environment
  #
  # Patterns use prefix automatically. Only define the suffix pattern.
  # Full branch name will be: {prefix}{pattern}
  #
  # Examples with prefix "AIPM_":
  feature: "feature/{description}"      # Creates: AIPM_feature/add-yaml-support
  bugfix: "fix/{description}"           # Creates: AIPM_fix/memory-leak
  test: "test/{description}"            # Creates: AIPM_test/version-control
  session: "session/{timestamp}"        # Creates: AIPM_session/20240621_143022
  release: "release/v{version}"         # Creates: AIPM_release/v1.2.0
  
  # Missing branch types (to be added):
  framework: "framework/{description}"  # Creates: AIPM_framework/opinions-loader
  refactor: "refactor/{description}"    # Creates: AIPM_refactor/modularize-scripts
  docs: "docs/{description}"            # Creates: AIPM_docs/update-readme
  chore: "chore/{description}"          # Creates: AIPM_chore/cleanup-logs
  
  # PROJECT PATTERNS (what projects might add):
  # deploy: "deploy/{environment}"      # Creates: PRODUCT_deploy/staging
  # hotfix: "hotfix/{description}"      # Creates: PRODUCT_hotfix/payment-bug
  # spike: "spike/{description}"        # Creates: PRODUCT_spike/ai-integration

# How long do branches live?
lifecycle:
  # Global lifecycle settings (apply to all branch types)
  global:
    handleUncommitted: "stash"     # What to do with uncommitted changes: stash|block|warn
    conflictResolution: "prompt"   # On merge conflicts: prompt|newest|fail
    allowOverride: true            # User can override per branch type
    trackActivity: true            # Monitor branch activity for cleanup
  # ⚠️ CRITICAL SAFETY INFORMATION ⚠️
  # ==================================
  # AIPM ONLY manages branches that match {prefix}{pattern}
  # - Framework: Only touches branches starting with "AIPM_"
  # - Projects: Only touches branches with their prefix
  # 
  # YOUR BRANCHES ARE SAFE:
  # - main, master, develop, feature/*, etc. are NEVER touched
  # - Only branches matching our patterns are managed
  # - Detection is PURELY based on prefix matching
  # 
  # WARNING: If you change prefix after branches exist:
  # - Old branches become "orphaned" (no longer managed)
  # - New rules only apply to new branches
  # - CURRENTLY: No migration support for prefix changes
  # - WORST CASE: Messy git tree, but NO DATA LOSS
  
  # LIFECYCLE RULES EXPLAINED:
  # -------------------------
  # deleteAfterMerge: Should branch be deleted after merging?
  #   - true: Delete after merge + daysToKeep
  #   - false: Keep branch, delete based on inactivity
  #
  # daysToKeep: When to delete the branch
  #   - When deleteAfterMerge=true: Days AFTER MERGE
  #   - When deleteAfterMerge=false: Days AFTER LAST COMMIT
  #   - 0 = immediate deletion
  #   - -1 = keep forever
  #   - N = delete after N days
  #
  # maxCount: Rolling window (optional)
  #   - Only keep the N most recent branches
  #   - Older ones deleted regardless of daysToKeep
  
  feature:
    deleteAfterMerge: true          # Delete after merge
    daysToKeep: 0                   # Immediately after merge
    # Example: AIPM_feature/add-yaml merged → deleted same day
  
  session:
    deleteAfterMerge: false         # Don't delete on merge
    daysToKeep: 7                   # 7 days after LAST COMMIT
    maxSessions: 10                 # Keep only 10 most recent
    # Example: AIPM_session/20240621_143022 
    #   - Last commit: June 21
    #   - Auto-delete: June 28 (unless it's in top 10)
  
  test:
    deleteAfterMerge: true          # Delete after merge
    daysToKeep: 3                   # 3 days after merge (grace period)
    # Example: AIPM_test/memory-fix merged June 21 → deleted June 24
  
  release:
    deleteAfterMerge: false         # Never delete on merge
    daysToKeep: -1                  # Keep forever
    # Example: AIPM_release/v1.0.0 → permanent

# How do I manage memory?
memory:
  # REQUIRED: Prefix for ALL memory entities in this workspace
  # MUST match the branch prefix for consistency
  # This prevents memory contamination between workspaces
  #
  # CRITICAL: This prefix is ENFORCED by the MCP memory server
  # When creating memories, the format MUST be:
  # {entityPrefix}{CATEGORY}_{NAME}
  #
  # Examples:
  # Framework: AIPM_PROTOCOL_SESSION_INIT
  # Product: PRODUCT_FEATURE_SHOPPING_CART
  # ClientSite: CLIENTSITE_TASK_HOMEPAGE_REDESIGN
  #
  # HOW IT WORKS:
  # 1. User prompts Claude with "Remember this protocol..."
  # 2. AIPM intercepts and formats as: AIPM_PROTOCOL_DESCRIPTION
  # 3. MCP memory server stores with this exact format
  # 4. Validation blocks any entity without correct prefix
  entityPrefix: AIPM_
  
  # REQUIRED: Allowed categories for memory entities
  # These control what types of knowledge can be stored
  # The MCP memory prompt will be formatted as:
  # "Create memory entity: {entityPrefix}{CATEGORY}_{description}"
  #
  # VALIDATION: Only these categories are allowed for this workspace
  # Attempting to use others will be blocked by validate_memory_stream()
  categories:
    - PROTOCOL                      # How AIPM works
    - WORKFLOW                      # Usage patterns
    - DESIGN                        # Architecture decisions
    - SCRIPT                        # Script implementations
    - MODULE                        # Module interfaces
    - TEST                          # Testing strategies
    - LEARNING                      # Implementation insights
  
  # Project categories (domain focused) examples:
  # E-commerce:
  #   - FEATURE                     # Feature specifications
  #   - BUG                        # Bug reports and fixes
  #   - CUSTOMER                   # Customer feedback
  #   - DEPLOYMENT                 # Deploy procedures
  #   - INTEGRATION                # Third-party integrations
  #
  # Client Website:
  #   - CONTENT                    # Content updates
  #   - DESIGN                     # Design decisions
  #   - SEO                        # SEO optimizations
  #   - PERFORMANCE                # Performance improvements
  
  # Category enforcement rules
  categoryRules:
    strict: true                    # Only allow defined categories
    allowDynamic: false            # Can't add new categories on the fly
    uncategorized: "block"         # What to do with uncategorized: block|warn|allow
    caseInsensitive: true          # PROTOCOL = protocol = Protocol

# How do I work with my team?
team:
  # How to handle team synchronization
  # Options: manual | prompt | auto
  # - manual: User must explicitly sync
  # - prompt: Ask when updates detected
  # - auto: Sync without asking (dangerous!)
  syncMode: manual                  
  
  # Check for remote updates on session start
  fetchOnStart: true
  
  # Alert when local and remote have diverged
  warnOnDivergence: true
  
  # Require pull requests for mainBranch
  # Framework: true (careful development)
  # Projects: might start with false
  requirePullRequest: true
  
  # Detailed sync behavior
  sync:
    # When to prompt for sync
    prompt:
      triggers: ["remote-ahead", "diverged", "merge-conflicts"]
      timeout: 30                  # Seconds to wait for user response
      default: "skip"              # What to do on timeout: skip|abort|sync
    
    # How to handle divergence
    divergence:
      definition: "local and remote have different commits"
      resolution: "prompt"         # How to resolve: prompt|merge|rebase|fail
      #   Prompts: "Your branch and remote have diverged. How to proceed?"
      #   Options: 1) Merge remote changes (→ creates merge commit)
      #           2) Rebase onto remote (→ replays your changes)
      #           3) Keep mine only (→ force push later)
      #           4) View differences (→ shows both versions)
      showDiff: true              # Show what's different
    
    # Conflict handling
    conflicts:
      strategy: "prompt"           # Resolution strategy: prompt|ours|theirs
      #   Prompts: "Merge conflict detected. How to resolve?"
      #   Options: 1) Keep my version (→ uses local changes)
      #           2) Take their version (→ uses remote changes)
      #           3) Manual merge (→ opens merge tool)
      #           4) Abort operation (→ cancels merge)
      backup: true                # Create backup before resolution
      abortOnFail: true           # Abort entire operation on conflict

# How do I handle temporary work sessions?
sessions:
  # REQUIRED: Should AIPM use session branches?
  # Session branches are temporary branches for exploratory work
  # They're perfect for "let me try something" without commitment
  # 
  # WHY THIS MATTERS:
  # - Keeps experimental work separate from real features
  # - Easy to throw away failed attempts
  # - Can merge good ideas back to feature branches
  enabled: true                    # Can be disabled for simpler workflows
  
  # OPTIONAL: When to create session branches
  # Controls whether start.sh creates a session branch automatically
  # Most users prefer on-demand creation to avoid branch proliferation
  autoCreate: false               # Create automatically on start.sh
  
  # OPTIONAL: Automatic merge behavior
  # Should stop.sh automatically merge session work?
  # Usually false - users decide what's worth keeping
  autoMerge: false               # Merge automatically on stop.sh
  
  # REQUIRED: Can multiple sessions exist?
  # Multiple sessions can be confusing for non-technical users
  # Recommended: false to keep things simple
  allowMultiple: false           # Only one session at a time
  
  # REQUIRED: How to name session branches
  # Pattern uses same variables as naming section
  # {timestamp} ensures uniqueness without user input
  namePattern: "session/{timestamp}" # Pattern for session branch names
  
  # OPTIONAL: Conflict handling
  # What to do when session has conflicts with parent
  # Prompting helps users understand what's happening
  promptOnConflict: true         # Ask user when conflicts detected
  #   Prompts: "Session has conflicts with parent branch. Continue?"
  #   Options: 1) Merge anyway (→ opens conflict resolution)
  #           2) Keep session separate (→ no merge)
  #           3) Discard session (→ loses session work)
  
  # OPTIONAL: Post-merge cleanup
  # Should merged session branches be deleted?
  # Usually true to keep branch list clean
  cleanupOnMerge: true          # Delete after successful merge

# How strict am I?
validation:
  # Overall enforcement level
  # Options: strict | relaxed | gradual
  # - strict: Block non-compliant operations (framework)
  # - relaxed: Warn but allow (new projects)
  # - gradual: Start relaxed, increase over time
  mode: strict
  
  # Gradual mode settings (only applies when mode: gradual)
  gradual:
    startLevel: "relaxed"          # Initial enforcement level
    endLevel: "strict"             # Target enforcement level
    progression:
      trigger: "days"              # Progress based on: days|commits|merges
      value: 30                    # After 30 days
      warnings: 7                  # Warn for 7 days before enforcing
      milestones:                  # Optional milestones
        - day: 7
          level: "warn"            # Start warning after 7 days
        - day: 14
          level: "mixed"           # Some strict, some relaxed
        - day: 30
          level: "strict"          # Full enforcement
  
  rules:
    # What to enforce
    enforceNaming: true             # Must follow branch patterns
    blockWrongPrefix: true          # Can't use PRODUCT_ in AIPM
    requireCleanTree: false         # Can work with uncommitted
    validateMemory: true            # Check entity prefixes
    
  # What stops operations cold (even in relaxed mode)
  blockers:
    wrongWorkspace: true            # Can't mix AIPM_ and PRODUCT_
    invalidPrefix: true             # Must use correct prefix
    corruptMemory: true            # Malformed memory file

# How do I handle initialization?
initialization:
  # REQUIRED: The AIPM_INIT_HERE marker
  # This special commit marks where AIPM branches diverge from user branches
  # It's our "point of no return" - AIPM owns everything after this
  #
  # WHY THIS MATTERS:
  # - Clear boundary between user's git history and AIPM's
  # - Enables clean reversion if needed
  # - Audit trail for when AIPM took control
  marker:
    # REQUIRED: What type of git object to create
    type: "commit"                # Create as commit (not tag)
    
    # REQUIRED: Commit message format
    # Variables: {workspace.name}, {timestamp}, {user}
    message: "AIPM_INIT_HERE: Initialize {workspace.name} workspace"
    
    # OPTIONAL: Include configuration snapshot
    # Helps debug "what settings were used at init?"
    includeMetadata: true         # Add opinions.yaml hash to commit
    
    # OPTIONAL: Verification on startup
    # Ensures branches haven't been tampered with
    verifyOnStart: true          # Check marker exists on session start
  
  # REQUIRED: Branch creation rules
  # Controls how AIPM creates its initial branches
  branchCreation:
    # REQUIRED: Working tree state requirement
    # Clean tree prevents accidental loss of work
    requireClean: true           # Working tree must be clean
    
    # OPTIONAL: Backup strategy
    # Usually false - user branches are already the backup
    backupOriginal: false        # Don't create backup branches
    
    # OPTIONAL: User communication
    # Shows what AIPM will create before doing it
    showDiff: true              # Show what will be created

# What are my system limits and defaults?
defaults:
  # REQUIRED: Timeout settings (in seconds)
  # Prevents runaway operations and hung processes
  # These apply to all AIPM operations unless overridden
  timeouts:
    # Maximum session duration
    # Helps prevent forgotten sessions consuming resources
    session: 3600                # 1 hour max session
    
    # Individual operation timeout
    # Catches stuck git operations or slow networks
    operation: 30                # 30 seconds per operation
    
    # Git-specific operations
    # Some git operations legitimately take longer
    git: 60                      # 1 minute for git operations
    
    # User interaction timeout
    # How long to wait for user response before defaulting
    prompt: 30                   # 30 seconds for user prompts
  
  # REQUIRED: Size and count limits
  # Prevents unlimited growth of logs, memories, and branches
  limits:
    # Memory file size cap
    # Prevents memory bloat affecting performance
    # When exceeded: rotation or compression
    memorySize: "10MB"           # Max memory file size
    
    # Backup retention
    # How many session backups to keep
    # Older ones are deleted automatically
    backupCount: 10              # Max backups to keep
    
    # Session history retention
    # How long to keep detailed session logs
    # After this: summary only or deletion
    sessionHistory: 30           # Days to keep session logs
    
    # Branch staleness warning
    # When to warn about potentially abandoned branches
    # Doesn't delete - just notifies
    branchAge: 90               # Days before warning about old branches
  
  # REQUIRED: Logging configuration
  # Controls verbosity and retention of AIPM logs
  logging:
    # Verbosity level
    # - debug: Everything (verbose)
    # - info: Normal operations
    # - warn: Problems that don't stop execution
    # - error: Only serious issues
    level: "info"                # debug, info, warn, error
    
    # Log storage location
    # Relative to workspace root
    location: ".aipm/logs/"      # Log directory
    
    # Log rotation schedule
    # Prevents single massive log file
    # Options: daily | weekly | size:10MB | never
    rotate: "daily"              # Rotation schedule
    
    # Log retention period
    # Older logs are compressed or deleted
    retain: 7                    # Days to retain logs

# Workspace-specific settings
settings:
  # Schema version for migration support
  schemaVersion: "1.0"
  
  # Template configuration (COMING SOON in Phase 1)
  # Projects should NOT have this section
  # templates:
  #   available: []              # Will be populated when templates exist
  #   default: "default"         # Will use default template
  
  # Framework-specific settings (only for type: framework)
  frameworkPaths:
    modules: ".aipm/scripts/modules/"     # Where AIPM modules live
    tests: ".aipm/scripts/test/"          # AIPM test files
    docs: ".aipm/docs/"                   # AIPM documentation
    templates: ".aipm/templates/"         # Project templates
    
  # Development workflow (applies to THIS workspace)
  workflow:
    # For framework development (strict)
    requireTests: true              # Can't merge without tests
    requireDocs: true               # Must document changes
    requireReview: true             # Peer review required
    # Projects might set these all to false initially

# When should scripts perform git operations?
# ===========================================
# This section orchestrates WHEN to apply the branching, naming, and lifecycle
# rules defined above. These flags tell wrapper scripts exactly when to act.
#
# CRITICAL: This is the automation layer that makes AIPM work for non-technical users
# They don't need to know about git - these rules handle it all automatically
workflows:
  # BRANCH CREATION TRIGGERS
  # When should scripts create new branches?
  branchCreation:
    # REQUIRED: Behavior when starting work
    # What happens when user runs start.sh?
    # Most non-technical users want "check-first" to avoid branch explosion
    startBehavior: "check-first"        # Options: always | check-first | manual
    # - always: Create new branch every start
    # - check-first: Only if no active branch exists
    # - manual: User must explicitly request
    
    # REQUIRED: Saving to protected branches
    # What happens when user tries to save directly to main?
    # "prompt" is safest - educates users about branching
    protectionResponse: "prompt"        # Options: auto-branch | prompt | block
    # - auto-branch: Automatically create feature branch
    # - prompt: Ask user what to do
    #   Prompts: "You're trying to save to main branch. What would you like to do?"
    #   Options: 1) Create feature branch (continues save)
    #           2) Create session branch (for experiments)
    #           3) Cancel (aborts save)
    # - block: Prevent save, show error
    
    # OPTIONAL: How to pick branch type
    # When creating a branch, how to determine its type?
    # "prompt" lets users choose appropriate type
    typeSelection: "prompt"             # Options: auto-detect | prompt | default
    # - auto-detect: Guess from content/context
    # - prompt: Ask user which type
    #   Prompts: "What type of work is this?"
    #   Options: 1) Feature - New functionality (→ feature/description)
    #           2) Bug Fix - Fixing an issue (→ fix/description)
    #           3) Documentation - Docs only (→ docs/description)
    #           4) Experiment - Just trying (→ test/description)
    # - default: Always use feature type

  # MERGE TRIGGERS
  # When should branches be merged?
  merging:
    # REQUIRED: Session branch handling
    # Session branches are temporary - when to fold them back?
    # "on-stop" is cleanest - consolidates work at natural boundary
    sessionMerge: "on-stop"             # Options: on-stop | on-save | manual | never
    # - on-stop: Merge when stop.sh runs
    # - on-save: Merge after each save
    # - manual: User must request merge
    # - never: Keep session branches separate
    
    # REQUIRED: Feature completion detection
    # How to know when a feature is ready to merge?
    # "prompt" prevents premature merges
    featureComplete: "prompt"           # Options: auto-detect | prompt | manual
    # - auto-detect: When marked as done
    # - prompt: Ask if ready to merge
    #   Prompts: "Is this feature complete and ready to merge?"
    #   Options: 1) Yes, merge now (→ starts merge process)
    #           2) No, keep working (→ stays on branch)
    #           3) Create PR for review (→ push & create PR)
    # - manual: Explicit merge command
    
    # REQUIRED: Merge conflict behavior
    # What to do when git can't auto-merge?
    # "interactive" helps users understand conflicts
    conflictHandling: "interactive"     # Options: interactive | abort | force-local | force-remote
    # - interactive: Walk through conflicts
    # - abort: Stop and notify user
    # - force-local: Keep local version
    # - force-remote: Take remote version

  # SYNC TRIGGERS  
  # When to sync with remote?
  synchronization:
    # REQUIRED: Pull behavior on startup
    # Should we get latest changes when starting?
    # "if-clean" is safest - prevents conflicts
    pullOnStart: "if-clean"             # Options: always | if-clean | prompt | never
    # - always: Pull every time
    # - if-clean: Only if no local changes
    # - prompt: Ask user
    #   Prompts: "Remote has new changes. Update now?"
    #   Options: 1) Yes, update (→ pulls changes)
    #           2) No, work offline (→ continues without pull)
    #           3) View changes first (→ shows what's new)
    # - never: Don't auto-pull
    
    # REQUIRED: Push behavior on shutdown
    # Should we share changes when stopping?
    # "if-feature" shares real work but not experiments
    pushOnStop: "if-feature"            # Options: always | if-feature | prompt | never
    # - always: Push all branches
    # - if-feature: Only push feature branches
    # - prompt: Ask what to push
    #   Prompts: "You have unpushed changes. Share them?"
    #   Options: 1) Yes, push all (→ pushes to remote)
    #           2) Push some (→ lists branches to choose)
    #           3) No, keep local (→ changes stay local only)
    # - never: Manual push only
    
    # OPTIONAL: Backup strategy during work
    # How often to backup work to remote?
    # "on-save" ensures nothing is lost
    autoBackup: "on-save"               # Options: on-save | periodic | manual | never
    # - on-save: Push after each save
    # - periodic: Based on intervals
    # - manual: User controls
    # - never: No auto-backup

  # CLEANUP TRIGGERS
  # When to clean up branches?
  cleanup:
    # REQUIRED: Post-merge cleanup
    # What to do with branches after merging?
    # "prompt" lets users decide case-by-case
    afterMerge: "prompt"                # Options: immediate | prompt | scheduled | never
    # - immediate: Delete right after merge
    # - prompt: Ask user
    #   Prompts: "Branch merged successfully. Delete it?"
    #   Options: 1) Yes, delete now (→ removes branch)
    #           2) Keep for now (→ branch remains)
    #           3) Archive it (→ renames to archive/*)
    # - scheduled: According to lifecycle rules
    # - never: Keep all branches
    
    # OPTIONAL: Stale branch detection
    # How to handle old, unused branches?
    # "notify" keeps users informed without being aggressive
    staleHandling: "notify"             # Options: auto-clean | notify | ignore
    # - auto-clean: Delete based on lifecycle
    # - notify: Tell user about stale branches
    # - ignore: Don't check for staleness
    
    # OPTIONAL: Failed work handling
    # What to do with abandoned experiments?
    # "archive" preserves history while cleaning active list
    failedWork: "archive"               # Options: archive | delete | keep
    # - archive: Move to archive namespace
    # - delete: Remove completely
    # - keep: Leave as-is
  
  # BRANCH FLOW RULES
  # Where branches come from and where they merge to
  branchFlow:
    # REQUIRED: Source rules (where to branch FROM)
    # Tells scripts which branch to use as source for new branches
    sources:
      # When creating branches via start.sh or save.sh
      default: "current"                 # Options: current | main | prompt
      # - current: Branch from whatever branch you're on
      # - main: Always branch from {mainBranch}
      # - prompt: Ask user where to branch from
      #   Prompts: "Create new branch from:"
      #   Options: 1) Current branch (→ branches from current)
      #           2) Main branch (→ branches from {mainBranch})
      #           3) Other branch (→ lists branches to choose)
      
      # Per-type overrides (uses naming patterns)
      byType:
        "feature/*": "{mainBranch}"      # Features always from main
        "fix/*": "{mainBranch}"          # Fixes always from main  
        "session/*": "current"           # Sessions from current work
        "test/*": "current"              # Tests from current work
        "release/*": "{mainBranch}"      # Releases from main
    
    # REQUIRED: Target rules (where to merge TO)
    # Tells scripts the merge destination for each branch
    targets:
      # Default merge behavior
      default: "parent"                  # Options: parent | main | prompt
      # - parent: Merge back to where it came from
      # - main: Always merge to {mainBranch}
      # - prompt: Ask user where to merge
      #   Prompts: "Merge this branch to:"
      #   Options: 1) Parent branch (→ where it came from)
      #           2) Main branch (→ {mainBranch})
      #           3) Other branch (→ lists branches)
      
      # Per-type overrides
      byType:
        "feature/*": "{mainBranch}"      # Features to main
        "fix/*": "{mainBranch}"          # Fixes to main
        "session/*": "parent"            # Sessions to parent
        "test/*": "parent"               # Tests to parent
        "release/*": "none"              # Releases don't merge back
    
    # OPTIONAL: Parent tracking
    # How to remember where branches came from
    parentTracking: "init-commit"        # Options: init-commit | branch-desc | none
    # - init-commit: Store in AIPM_INIT_HERE message
    # - branch-desc: Use git branch description
    # - none: Don't track (relies on conventions)

# File metadata
metadata:
  version: "1.0"                    # Schema version
  schema: "https://rawthoughts.in/aipm/schemas/opinions/v1"
  lastModified: "2025-06-21T20:30:00Z"
  compatibility: ">=1.0"            # Minimum AIPM version required

# PROJECT INITIALIZATION:
# =======================
# How AIPM integrates with existing projects:
#
# SAFETY FIRST: init.sh has multiple modes to protect your work
#
# MODE 1: Initialize already symlinked project (SAFEST)
# -----------------------------------------------------
# If you manually created symlink: ln -s /path/to/project ./MyProject
# Run: ./scripts/init.sh --project MyProject
# - Detects existing symlink, SKIPS symlink creation
# - Only initializes AIPM in the linked project
# - Zero risk to your project location
#
# MODE 2: Create symlink and initialize
# -------------------------------------
# Run: ./scripts/init.sh --link --project MyProject --path /path/to/project
# - Checks if MyProject already exists (safety check)
# - If exists, ABORTS to prevent overwriting
# - Creates symlink only if safe
# - Then initializes AIPM
#
# MODE 3: Batch initialization
# ---------------------------
# Run: ./scripts/init.sh --link --batch projects.txt
# Where projects.txt contains:
#   MyProject:/path/to/my/project
#   ClientSite:/path/to/client/site
#   MobileApp:/path/to/mobile/app
# - Processes each line, creates symlinks
# - Skips any that already exist
# - Initializes AIPM in each
#
# INITIALIZATION PROCESS (same for all modes):
# 1. Check if project has .aipm/opinions.yaml
# 2. If not, initialize:
#    - Create project/.aipm/ directory
#    - Copy template from .aipm/templates/{template}.yaml
#    - Update values (name, prefix, etc.)
# 3. Detect project's main branch
# 4. Create PROJECT_MAIN from detected branch
# 5. Add AIPM_INIT_HERE commit marker
#
# SAFETY FEATURES:
# - NEVER overwrites existing symlinks
# - NEVER moves or copies your project
# - NEVER modifies without --link flag
# - ALWAYS shows what it will do first
# - ABORTS on any safety concern
#
# WORKSPACE STRUCTURE after init:
# AIPM/
# ├── .aipm/                    # ⭐ THE AIPM HUB - EVERYTHING LIVES HERE
# │   ├── memory.json          # Symlink to MCP memory (AI-agnostic)
# │   ├── opinions.yaml        # Workspace configuration
# │   ├── memory/              # 🧠 CRITICAL: Persistent memory storage
# │   │   ├── local_memory.json # Workspace AI knowledge (git-tracked)
# │   │   ├── backup.json      # Session backup (gitignored)
# │   │   ├── session_*        # Session files (gitignored)
# │   │   └── [merge files]    # Temporary merge files
# │   ├── templates/           # Project initialization templates
# │   │   └── README.md        # Templates documentation (templates coming soon)
# │   ├── scripts/             # All AIPM scripts
# │   │   ├── init.sh          # Project initialization
# │   │   ├── start.sh         # Session management
# │   │   ├── stop.sh          
# │   │   ├── save.sh          
# │   │   ├── revert.sh        
# │   │   ├── modules/         # Core modules (clean structure!)
# │   │   │   ├── shell-formatting.sh
# │   │   │   ├── version-control.sh
# │   │   │   ├── migrate-memories.sh
# │   │   │   ├── sync-memory.sh
# │   │   │   └── cleanup-global.sh
# │   │   └── test/            # Test files
# │   └── docs/                # All documentation
# │       ├── DOCS.md          # Documentation hub
# │       ├── memory-management.md
# │       ├── version-control.md
# │       └── workflow.md
# ├── init.sh -> .aipm/scripts/init.sh      # Convenience symlinks
# ├── start.sh -> .aipm/scripts/start.sh
# ├── stop.sh -> .aipm/scripts/stop.sh
# ├── save.sh -> .aipm/scripts/save.sh
# ├── revert.sh -> .aipm/scripts/revert.sh
# ├── .claude/                  # Legacy MCP settings (gitignored)
# │   └── settings.local.json   # MCP server configuration
# ├── .obsidian/                # Obsidian editor settings (partially gitignored)
# ├── .gitignore                # Git ignore rules
# ├── .agentrules               # AI behavior rules (vendor-agnostic)
# ├── AIPM.md                   # Framework documentation
# ├── README.md                 # Quick start guide
# ├── current-focus.md          # Active framework tasks
# ├── broad-focus.md            # Framework vision
# ├── changelog.md              # Framework history
# ├── LICENSE                   # Apache 2.0 license
# │
# └── MyProject/                # Symlink to your project
#     ├── .aipm/                # ⭐ PROJECT'S AIPM HUB
#     │   ├── memory.json       # Symlink to MCP memory
#     │   ├── opinions.yaml     # Project-specific config
#     │   └── memory/           # 🧠 Project memory
#     │       ├── local_memory.json  # Project AI knowledge
#     │       └── backup.json        # Session backup
#     ├── .agentrules           # Project AI behavior rules
#     ├── current-focus.md      # Project active tasks
#     ├── broad-focus.md        # Project vision
#     ├── changelog.md          # Project history
#     └── [your project files]  # Your existing code
#
# CRITICAL: AIPM's power comes from .aipm/ directory:
# - memory.json: Live AI memory (symlink to MCP)
# - memory/: Persistent storage (git-tracked knowledge)
# - opinions.yaml: Workspace behavior configuration
#
# CRITICAL: Standard files that make AIPM work:
# - .agentrules: AI behavior (was CLAUDE.md)
# - current-focus.md: Active tasks
# - broad-focus.md: Long-term vision
# - changelog.md: Progress tracking
# - local_memory.json: Knowledge persistence